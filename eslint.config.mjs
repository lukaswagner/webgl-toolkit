import st from '@stylistic/eslint-plugin';
import ts from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';

export default [
    {
        ignores: ['*/build/*'],
    },
    // eslint recommended as warnings plus some tweaks
    {
        rules: {
            'array-callback-return': 'warn',
            'consistent-return': 'warn',
            'constructor-super': 'warn',
            'default-case': 'warn',
            'default-case-last': 'warn',
            'eqeqeq': 'warn',
            'for-direction': 'warn',
            'getter-return': 'warn',
            'no-async-promise-executor': 'warn',
            'no-case-declarations': 'warn',
            'no-class-assign': 'warn',
            'no-compare-neg-zero': 'warn',
            'no-cond-assign': 'warn',
            'no-const-assign': 'warn',
            'no-constant-binary-expression': 'warn',
            'no-constant-condition': 'warn',
            'no-control-regex': 'warn',
            'no-debugger': 'warn',
            'no-delete-var': 'warn',
            'no-dupe-args': 'warn',
            'no-dupe-class-members': 'warn',
            'no-dupe-else-if': 'warn',
            'no-dupe-keys': 'warn',
            'no-duplicate-imports': 'warn',
            'no-duplicate-case': 'warn',
            'no-empty': 'warn',
            'no-empty-character-class': 'warn',
            'no-empty-pattern': 'warn',
            'no-empty-static-block': 'warn',
            'no-ex-assign': 'warn',
            'no-extra-boolean-cast': 'warn',
            'no-fallthrough': 'warn',
            'no-func-assign': 'warn',
            'no-global-assign': 'warn',
            'no-import-assign': 'warn',
            'no-invalid-regexp': 'warn',
            'no-irregular-whitespace': 'warn',
            'no-loss-of-precision': 'warn',
            'no-misleading-character-class': 'warn',
            'no-new-native-nonconstructor': 'warn',
            'no-nonoctal-decimal-escape': 'warn',
            'no-obj-calls': 'warn',
            'no-octal': 'warn',
            'no-promise-executor-return': 'warn',
            'no-prototype-builtins': 'warn',
            'no-redeclare': 'warn',
            'no-regex-spaces': 'warn',
            'no-self-assign': 'warn',
            'no-setter-return': 'warn',
            'no-shadow-restricted-names': 'warn',
            'no-sparse-arrays': 'warn',
            'no-template-curly-in-string': 'warn',
            'no-this-before-super': 'warn',
            'no-undef': 'warn',
            'no-unexpected-multiline': 'warn',
            'no-unreachable': 'warn',
            'no-unsafe-finally': 'warn',
            'no-unsafe-negation': 'warn',
            'no-unsafe-optional-chaining': 'warn',
            'no-unused-labels': 'warn',
            'no-unused-private-class-members': 'warn',
            'no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
            'no-useless-backreference': 'warn',
            'no-useless-catch': 'warn',
            'no-useless-escape': 'warn',
            'no-var': 'warn',
            'no-with': 'warn',
            'one-var': ['warn', 'never'],
            'prefer-const': 'warn',
            'require-await': 'warn',
            'require-yield': 'warn',
            'sort-imports': ['warn', { ignoreCase: true }],
            'use-isnan': 'warn',
            'valid-typeof': 'warn',
        },
    },
    // stylistic recommended as warnings plus some tweaks
    {
        plugins: {
            '@st': st,
        },
        rules: {
            '@st/array-bracket-spacing': ['warn', 'never'],
            '@st/arrow-parens': ['warn', 'always'],
            '@st/arrow-spacing': ['warn', { after: true, before: true }],
            '@st/block-spacing': ['warn', 'always'],
            '@st/brace-style': ['warn', '1tbs'],
            '@st/comma-dangle': ['warn', 'always-multiline'],
            '@st/comma-spacing': ['warn', { after: true, before: false }],
            '@st/comma-style': ['warn', 'last'],
            '@st/computed-property-spacing': 'warn',
            '@st/dot-location': ['warn', 'property'],
            '@st/eol-last': 'warn',
            '@st/indent': ['warn', 4],
            '@st/indent-binary-ops': ['warn', 4],
            '@st/key-spacing': ['warn', { afterColon: true, beforeColon: false }],
            '@st/keyword-spacing': ['warn', { after: true, before: true }],
            '@st/lines-between-class-members': 'off',
            '@st/max-len': ['warn', {
                code: 100,
                ignoreTemplateLiterals: true,
            }],
            '@st/max-statements-per-line': ['warn', { max: 1 }],
            '@st/member-delimiter-style': ['warn', { multiline: { delimiter: 'semi' } }],
            '@st/multiline-ternary': ['warn', 'always-multiline'],
            '@st/new-parens': 'warn',
            '@st/no-floating-decimal': 'off',
            '@st/no-mixed-operators': 'off',
            '@st/no-mixed-spaces-and-tabs': 'warn',
            '@st/no-multi-spaces': 'warn',
            '@st/no-multiple-empty-lines': ['warn', { max: 1, maxBOF: 0, maxEOF: 0 }],
            '@st/no-tabs': 'warn',
            '@st/no-trailing-spaces': 'warn',
            '@st/no-whitespace-before-property': 'warn',
            '@st/object-curly-spacing': ['warn', 'always'],
            '@st/operator-linebreak': ['warn', 'after'],
            '@st/padded-blocks': ['warn', 'never'],
            '@st/quote-props': 'off',
            '@st/quotes': ['warn', 'single'],
            '@st/rest-spread-spacing': ['warn', 'never'],
            '@st/semi': ['warn', 'always'],
            '@st/semi-spacing': ['warn', { after: true, before: false }],
            '@st/space-before-blocks': ['warn', 'always'],
            '@st/space-before-function-paren': ['warn', {
                anonymous: 'always', asyncArrow: 'always', named: 'never',
            }],
            '@st/space-in-parens': ['warn', 'never'],
            '@st/space-infix-ops': 'warn',
            '@st/space-unary-ops': ['warn', { nonwords: false, words: true }],
            '@st/template-curly-spacing': 'warn',
            '@st/template-tag-spacing': ['warn', 'never'],
            '@st/type-annotation-spacing': 'warn',
            '@st/type-generic-spacing': 'warn',
            '@st/type-named-tuple-spacing': 'warn',
            '@st/wrap-iife': ['warn', 'any', { functionPrototypeMethods: true }],
            '@st/yield-star-spacing': ['warn', 'both'],
        },
    },
    // tsconfig for lib
    {
        files: ['lib/**/*.ts'],
        languageOptions: {
            parser: tsParser,
            ecmaVersion: 5,
            sourceType: 'script',
            parserOptions: {
                project: ['lib/tsconfig.json'],
            },
        },
    },
    // typescript-eslint strictTypeChecked as warnings plus some tweaks
    {
        files: ['**/*.ts'],
        plugins: {
            '@ts': ts,
        },
        rules: {
            'constructor-super': 'off',
            'getter-return': 'off',
            'no-const-assign': 'off',
            'no-dupe-args': 'off',
            'no-dupe-class-members': 'off',
            'no-dupe-keys': 'off',
            'no-func-assign': 'off',
            'no-import-assign': 'off',
            'no-new-symbol': 'off',
            'no-new-native-nonconstructor': 'off',
            'no-obj-calls': 'off',
            'no-redeclare': 'off',
            'no-setter-return': 'off',
            'no-this-before-super': 'off',
            'no-undef': 'off',
            'no-unreachable': 'off',
            'no-unsafe-negation': 'off',
            'prefer-rest-params': 'warn',
            'prefer-spread': 'warn',
            '@ts/await-thenable': 'warn',
            '@ts/ban-ts-comment': [
                'warn',
                { minimumDescriptionLength: 10 },
            ],
            '@ts/explicit-member-accessibility': 'warn',
            'no-array-constructor': 'off',
            '@ts/no-array-constructor': 'warn',
            '@ts/no-array-delete': 'warn',
            '@ts/no-base-to-string': 'warn',
            '@ts/no-confusing-void-expression': 'off',
            '@ts/no-deprecated': 'warn',
            '@ts/no-duplicate-enum-values': 'warn',
            '@ts/no-duplicate-type-constituents': 'warn',
            '@ts/no-dynamic-delete': 'warn',
            '@ts/no-empty-object-type': 'off',
            '@ts/no-explicit-any': 'off',
            '@ts/no-extra-non-null-assertion': 'warn',
            '@ts/no-extraneous-class': 'warn',
            '@ts/no-floating-promises': 'warn',
            '@ts/no-for-in-array': 'warn',
            'no-implied-eval': 'off',
            '@ts/no-implied-eval': 'warn',
            '@ts/no-invalid-void-type': 'warn',
            '@ts/no-meaningless-void-operator': 'warn',
            '@ts/no-misused-new': 'warn',
            '@ts/no-misused-promises': 'warn',
            '@ts/no-mixed-enums': 'warn',
            '@ts/no-namespace': 'off',
            '@ts/no-non-null-asserted-nullish-coalescing': 'warn',
            '@ts/no-non-null-asserted-optional-chain': 'warn',
            '@ts/no-non-null-assertion': 'off',
            '@ts/no-redundant-type-constituents': 'warn',
            '@ts/no-require-imports': 'off',
            '@ts/no-this-alias': 'warn',
            '@ts/no-unnecessary-boolean-literal-compare': 'warn',
            '@ts/no-unnecessary-condition': 'off',
            '@ts/no-unnecessary-template-expression': 'warn',
            '@ts/no-unnecessary-type-arguments': 'warn',
            '@ts/no-unnecessary-type-assertion': 'warn',
            '@ts/no-unnecessary-type-constraint': 'warn',
            '@ts/no-unnecessary-type-parameters': 'warn',
            '@ts/no-unsafe-argument': 'warn',
            '@ts/no-unsafe-assignment': 'off',
            '@ts/no-unsafe-call': 'off',
            '@ts/no-unsafe-declaration-merging': 'warn',
            '@ts/no-unsafe-enum-comparison': 'warn',
            '@ts/no-unsafe-function-type': 'warn',
            '@ts/no-unsafe-member-access': 'off',
            '@ts/no-unsafe-return': 'warn',
            '@ts/no-unsafe-unary-minus': 'warn',
            'no-unused-expressions': 'off',
            '@ts/no-unused-expressions': 'warn',
            'no-unused-vars': 'off',
            '@ts/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
            'no-useless-constructor': 'off',
            '@ts/no-useless-constructor': 'warn',
            '@ts/no-wrapper-object-types': 'warn',
            'no-throw-literal': 'off',
            '@ts/only-throw-error': 'warn',
            '@ts/prefer-as-const': 'warn',
            '@ts/prefer-literal-enum-member': 'warn',
            '@ts/prefer-namespace-keyword': 'warn',
            'prefer-promise-reject-errors': 'off',
            '@ts/prefer-promise-reject-errors': 'warn',
            '@ts/prefer-reduce-type-parameter': 'warn',
            '@ts/prefer-return-this-type': 'warn',
            '@ts/promise-function-async': 'warn',
            'require-await': 'off',
            '@ts/require-await': 'warn',
            '@ts/restrict-plus-operands': 'warn',
            '@ts/restrict-template-expressions': 'off',
            'no-return-await': 'off',
            '@ts/return-await': ['warn', 'error-handling-correctness-only'],
            '@ts/switch-exhaustiveness-check': 'warn',
            '@ts/triple-slash-reference': 'warn',
            '@ts/unbound-method': 'warn',
            '@ts/unified-signatures': 'warn',
            '@ts/use-unknown-in-catch-callback-variable': 'warn',
        },
    },
];
